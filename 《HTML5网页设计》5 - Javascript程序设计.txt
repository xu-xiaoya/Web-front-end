
第四章 JavaScript程序设计
一、数据类型
JavaScript中有5种基本数据类型：Number、Boolean、String、Undefined、Null
1、数字（Number）类型
JavaScript中的数字不区分整型和浮点型
2、布尔（Boolean）类型
布尔类型只有2个值：true 和 false。
3、字符串（String）类型
如：var s = "javascript";
4、Undefined类型
当定义了一个变量但没有为改变量赋值时，这个变量的值就是undefined。
5、Null类型
代表空，表示一个空对象指针
6、数据类型的转换
1) 转换为字符串
var a = 20;
var s = a.toString();
var arr = ["javascript","html","css"];
var str = arr.toString();
2) 转换为数字类型
var s = "12.5";
var a = parseInt(s);
var b = parseFloat(s);

二、常量和变量
1、常量
十进制整数
八进制整数，第一个数字是0，如：0567。
十六进制整数，以0x或0X开头，如：0x2f。
浮点数常量
字符串常量

2、变量
定义变量，如：
var a; 或 var a = 10;

三、表达式与运算符
1、算术运算符
  +、-、*、/、%、++、--

2、关系运算符
  >、>=、<、<=、==、!=、===(全等)、!==(不全等)

①==：如果两个操作数数据类型相同， 则进行值的比较；如果不同， 则转换成相同类型后再进行比较。
例：
100==“100”??? //转换成同类型比较，值相等，返回true
1==true????????? //同上，返回true
“1”==“01”????? //返回false，此处等号两边值得类型相同，值不同。
NaN==NaN? //返回false，NaN和所有值包括自己都不相等。>

②===：值和数据类型都要相同，如果类型不同，直接就是false.
例：
100===“100”?? //数据类型不同，返回false
abc===“abc”?? //数据类型不同，返回false
‘abc’===“abc”? //类型和值都相同，返回true
false===false? //返回true

3、赋值运算符
  =、+=、-=、*=、/=、%=

4、字符串运算符
  + 把2个字符串相连。

5、逻辑运算符
  &&、||、!

6、位运算符
  &、|、^、~、<<、>>、>>>

7、条件运算符
  ? :
  
四、语句和函数
1、if 语句
2、switch 语句
3、while 语句
4、do while 语句
5、for 语句
6、for in 语句
例：
for in 用来遍历整个数组的元素，没有for灵活，但在适当情境下使用会比for编写更快：例：
var mycars = new Array()
mycars[0] = "Saab"
mycars[1] = "Volvo"
mycars[2] = "BMW"
 
for (i=0;i<mycars.length;i++) {
  document.write(mycars[i] + "<br />")


编译结果如下，将数组的全部元素都依次打印出来：
Saab
Volvo
BMW

7、函数
例：
function sum(a,b){
  var s = a + b;
  return s;
}

五、数组
1、创建数组
  var a = new Array(); 创建一个空数组
  var a = new Array(3); 创建一个有3个元素的数组
  var a = new Array(10,"javascript","html")
  var a = [10,"javascript","html"];
2、添加数组元素
  a[0] = 10;
  a[1] = "javascript";
  a[10] = "css";
3、Array 对象的属性和方法
1) length	设置或返回数组中元素的数目。
  如：
  var a = new Array(3); 
  document.write(a.length);
  a.length=5;
2) toString()	把数组转换为字符串，并返回结果。数组中的元素之间用逗号分隔。
3) join()	把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。
  例
  var a = new Array("javascript","html","css")
  document.write(a.join()); 或 document.write(a.join("."));
4) concat()	连接两个或更多的数组，并返回一个新的数组。
    var a = [1,2,3];
    var b = a.concat(4,5);
5) push()	向数组的末尾添加一个或更多元素，并返回新的长度。
6) pop()	删除并返回数组的最后一个元素
7) unshift()	向数组的开头添加一个或更多元素，并返回新的长度。
8) shift()	删除并返回数组的第一个元素
9) slice(start,end)	返回一个子数组，包含从 start 到 end （不包括该元素）的 所有元素。
10) splice() 用于插入、删除或替换数组的元素。格式为
    splice(start, count, value1, value2, ...)
    表示用后面的多个value值，来替换从start位置开始的count个元素。
11) reverse()	颠倒数组中元素的顺序。
12) sort()	对数组的元素进行排序
  如果不带参数，将按字符编码的顺序排序
  可以用一个比较函数做为参数，该比较函数有两个参数 a 和 b，如果返回值大于0，则要交换 a 和 b 的位置；如果返回值小于或等于0，则不操作。
  例：
  var a = [10, 35, 234, 42, 8, 53, 125];
  document.write(a.sort() + "<br>");
  function asc(a, b){  // 从小到大排序
    return a - b;
  }
  function desc(a, b){ // 从大到小排序
    return b - a;
  }
  document.write(a.sort(asc) + "<br>");
  document.write(a.sort(desc) + "<br>");
13) toLocaleString()	把数组转换为本地数组，并返回结果。

六、对象
1、创建对象
方式1，使用 new 操作符
  var person = new Object();
  person.name = "zhangsan";
  person.age = 20;
  person.showName = function(){
    alert(this.name);
  }
方式2，使用对象字面量
  var person = { 
    name: "zhangsan", 
    age: 20,
    showName: function(){
      alert(this.name);
    }
  }
2、构造函数
使用构造函数创建对象
  function Person(name, age){
    this.name = name;
    this.age = age;
    this.showName = function(){
      alert(this.name);
    };
  }
  var person1 = new Person("zhang", 20);
  var person1 = new Person("li", 21);
  
3、Math对象
Math对象的属性
    E	返回算术常量 e，即自然对数的底数（约等于2.718）。
    PI	返回圆周率（约等于3.14159）。
    SQRT2	返回 2 的平方根（约等于 1.414）。
Math对象的方法
    abs(x)	返回数的绝对值。
    sin(x)	返回数的正弦。
    cos(x)	返回数的余弦。
    tan(x)	返回角的正切。
    exp(x)	返回 e 的指数。
    floor(x)	对数进行下舍入。返回小于等于 x，且与 x 最接近的整数。
    ceil(x)	对数进行上舍入。返回大于等于 x，并且与它最接近的整数。
    round(x)	把数四舍五入为最接近的整数。返回与 x 最接近的整数。对于 0.5，该方法将进行上舍入。
    max(x,y)	返回 x 和 y 中的最高值。
    min(x,y)	返回 x 和 y 中的最低值。
    pow(x,y)	返回 x 的 y 次幂。
    sqrt(x)	返回数的平方根。
    random()	返回 0 ~ 1 之间的随机数。
    
七、日期对象
1、创建日期
  var d1 = new Date();
  var d2 = new Date(2012, 6, 4);
  
2、格式化日期方法
  toString()――把 Date 对象转换为字符串。
  toUTCString()――根据世界时，把 Date 对象转换为字符串。
  toLocaleString()――根据本地时间格式，把 Date 对象转换为字符串。
  toTimeString()――把 Date 对象的时间部分转换为字符串。
  toDateString()――把 Date 对象的日期部分转换为字符串。
  toLocaleDateString()――根据本地时间格式，把 Date 对象的日期部分转换为字符串。
  toLocaleTimeString()――根据本地时间格式，把 Date 对象的时间部分转换为字符串。
  
3、获取日期和时间
    Date()	返回当日的日期和时间。
    getDate()	从 Date 对象返回一个月中的某一天 (1 ~ 31)。
    getDay()	从 Date 对象返回一周中的某一天 (0 ~ 6)。
    getMonth()	从 Date 对象返回月份 (0 ~ 11)。	
    getFullYear()	从 Date 对象以四位数字返回年份。
    getHours()	返回 Date 对象的小时 (0 ~ 23)。
    getMinutes()	返回 Date 对象的分钟 (0 ~ 59)。
    getSeconds()	返回 Date 对象的秒数 (0 ~ 59)。
    getTime()	返回 1970 年 1 月 1 日至今的毫秒数。

4、设置日期和时间
    setDate()	设置 Date 对象中月的某一天 (1 ~ 31)。
    setMonth()	设置 Date 对象中月份 (0 ~ 11)。
    setFullYear()	设置 Date 对象中的年份（四位数字）
    setHours()	设置 Date 对象中的小时 (0 ~ 23)。
    setMinutes()	设置 Date 对象中的分钟 (0 ~ 59)。
    setSeconds()	设置 Date 对象中的秒钟 (0 ~ 59)。

5、作业
  写一个网页，上面显示一行欢迎词，格式为：“下午好！今天是2012年5月13日，星期日，现在的时间是14:05。欢迎访问本网站。”
<!DOCTYPE html>
<html>
<head>
<meta charset = "utf-8">
<title>JavaScript示例</title>
<style>
</style>
<script>
function showTime()
{
  var now = new Date();
  var weekday = ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"];
  var hour = now.getHours();
  var minute = now.getMinutes();
  var second = now.getSeconds();
  if(hour<=12) str = "早上好！";
  else if(hour<=18) str = "下午好！";
  else str = "晚上好！";
  if(minute<10) minute = "0" + minute;
  if(second<10) second = "0" + second;
  var str = str + "今天是 " + now.getFullYear() + "年" + (now.getMonth()+1) + "月" + now.getDate() + "日，" + weekday[now.getDay()] + "，现在的时间是 " + hour + ":" + minute + ":" + second + " ，欢迎访问本网站。";
  document.getElementById("showTime").innerHTML = str;
  setTimeout(showTime, 1000);
}
  window.onload = showTime; 
//  setInterval(showTime, 1000); 
</script>
</head>
<body>
<div id = "showTime"></div>
</body>
</html>
  
八、字符串对象
1、创建字符串(String)对象
  var s = new String("Hello World!");
2、String对象的属性
  length	字符串的长度
3、String对象的方法
1)  charAt()	返回在指定位置的字符。
2)  concat()	连接字符串。使用 " + " 运算符来进行字符串的连接运算通常会更简便一些。
    例：
    var str1 = "Hello "
    var str2 = "world!"
    document.write(str1.concat(str2))
3)  substring(start,stop)	从字符串取子串，其内容是从start 处到 stop-1 处的所有字符。substring() 不接受负的参数。
4)  slice(start,end)	从字符串取子串，其内容是从start 处到 stop-1 处的所有字符。slice() 允许使用负数作为参数。
5)  toLowerCase()	把字符串转换为小写。返回一个新的字符串。
6)  toUpperCase()	把字符串转换为大写。返回一个新的字符串。
7)  split()	把字符串分割为字符串数组。
    例. 使用下面的代码，可以把句子分割成单词：
    var sentence = "How are you doing today?"
    var words = sentence.split(" ");
8)  indexOf()	检索字符串。返回某个指定的字符串值在字符串中首次出现的位置。
9)  search()  检索与正则表达式相匹配的子字符串。
10) match()  找到一个或多个正在表达式的匹配。返回匹配结果的数组。
11) replace(regexp,replacement)	替换与正则表达式匹配的子串。返回一个用 replacement 替换了 regexp 的新的字符串。
  例1，转换姓名的格式。
    name = "Doe, John";
    document.write(name.replace(/(\w+)\s*, \s*(\w+)/, "$2 $1")); // John Doe
  例2，把单词的首字母转换为大写。
    name = "aaa bbb ccc";
    uw = name.replace(/\b\w+\b/g, function(word){
      return word.substring(0,1).toUpperCase()+word.substring(1);}
    );
    
九、正则表达式
1、概念
    正则表达式是指一个用来描述或者匹配一系列符合某个句法规则的字符串的单个字符串。许多程序设计语言都支持利用正则表达式进行字符串操作。正则表达式通常缩写成 regex 或 regexp。
    正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。
    
2、正则表达式示例    
    例1：假设你在一篇英文小说里查找hi，你可以使用正则表达式hi。但这样，也会把比如him,history,high等等里面的hi找出来。如果要精确地查找hi这个单词的话，我们应该使用\bhi\b。\b代表着单词的开头或结尾。
    例2：如果要查找一种电话号码，它以0开头，然后是3个数字，然后是一个连字号 - ，最后是7个数字，正则表达式为 0\d{3}-\d{7}。
    例3：\b\w{6}\b 匹配刚好6个字符的单词。
    例4：\d+匹配1个或更多连续的数字。
    例5：如果要填一个6-10位的QQ号，正则表达式为 ^\d{6,10}$。
    例6：匹配1-31天：0?[1-9]|[12][0-9]|3[01]，1-12月：0?[1-9]|1[0-2]，年份：19|20\d{2}。
    例7：匹配2种格式的电话号码 (0795)1234567 和 0795-1234567，\(0\d{3}\)\d{7}|0\d{3}-\d{7}。
    例8：IP地址 ((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)
    例9：网址URL ^(https?:\/\/)?([\w\d_-]+\.)+\w{2,4}(\/[\w\d\.\?-_%=&]+)*$
    例10：电子邮箱
        /\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/
        /^([\w\d_\.-]+)@([\w\d_-]+\.)+\w{2,4}$/
        /^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/
        /^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/
    例11：匹配空白行的正则表达式：^\s*\n 。注：可以用来删除空白行。
    例12：删除文字当中多余的换行 (\w)(\n)(\w) 替换为 \1\3；给每一段前面加几个空格 (\n)(\w) 替换为 \1    \2。
    例13：匹配首尾空白字符的正则表达式：^\s*|\s*$ 。注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)。
    例14：日期，格式为 yyyy-m-d。只做格式验证, 不做日期的有效性验证：\d{4}-\d{1,2}-\d{1,2}；做简单的验证：\d{4}-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])。
    例15：日期正则表达式，从1900-2099年，考虑了闰年，格式为 yyyy-m-d：
/^((((19|20)\d{2})-(0?[13-9]|1[012])-(0?[1-9]|[12]\d|30))|(((19|20)\d{2})-(0?[13578]|1[02])-31)|(((19|20)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|((((19|20)([13579][26]|[2468][048]|0[48]))|(2000))-0?2-29))$/
    如果不考虑闰年，则：
/^((((19|20)\d{2})-(0?[13-9]|1[012])-(0?[1-9]|[12]\d|30))|(((19|20)\d{2})-(0?[13578]|1[02])-31)|(((19|20)\d{2})-0?2-(0?[1-9]|1\d|2[0-8])))$/
    或（格式为yyyy-mm-dd）：
^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$
    
3、元字符
    \d	查找数字。
    \D	查找非数字字符。
    \w	查找字母、数字、下划线或汉字。
    \W	查找非字母、数字、下划线或汉字。
    \s	查找空白字符。空白字符可以是：空格符、制表符、回车符、换行符、中文全角空格。
    \S	查找非空白字符。
    .	查找单个字符，除了换行和行结束符。
    \b	查找位于单词的开头或结尾的匹配。
    \B	查找不处在单词的开头或结尾的匹配。
    \n	查找换行符。
    \r	查找回车符。
    \t	查找制表符。
    
4、量词
    *	重复零次或更多次
    +	重复一次或更多次
    ?	重复零次或一次
    {n}	重复n次
    {n,}	重复n次或更多次
    {n,m}	重复n到m次
    ^	行的开始
    $	行的结尾
    ?= 	表示其后紧接指定字符串。
    ?! 	表示其后没有紧接指定字符串。
    
5、方括号，用于查找某个范围内的字符
    [abc]	查找方括号之间的任何字符。
    [^abc]	查找任何不在方括号之间的字符。
    [0-9]	查找任何从 0 至 9 的数字。
    [a-z]	查找任何从小写 a 到小写 z 的字符。
    [A-Z]	查找任何从大写 A 到大写 Z 的字符。
    [A-z]	查找任何从大写 A 到小写 z 的字符。
    [abcd]	查找给定集合内的任何字符。
    [^abcd]	查找给定集合外的任何字符。
    
例，验证邮箱格式：
//    var reg = new RegExp("\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*");
    var reg = /\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/;
    if (!reg.test("28989587.qq.com")) {
      alert("邮箱格式不对！");

    
十、windows对象
    Window 对象表示浏览器中打开的窗口。
1、windows对象的属性
    innerheight	返回窗口的文档显示区的高度。
    innerwidth	返回窗口的文档显示区的宽度。
    outerheight	返回窗口的外部高度。
    outerwidth	返回窗口的外部宽度。

2、windows对象的方法
1) open() 打开一个新的浏览器窗口或查找一个已命名的窗口。
    格式为：window.open(URL,name,features,replace)
    窗口特征（Window Features）
    width=pixels	窗口的文档显示区的宽度。以像素计。
    height=pixels	窗口文档显示区的高度。以像素计。
    left=pixels	窗口的 x 坐标。以像素计。
    top=pixels	窗口的 y 坐标。
    toolbar=yes|no	是否显示浏览器的工具栏。
    titlebar=yes|no	是否显示标题栏。
    menubar=yes|no	是否显示菜单栏。
    scrollbars=yes|no	是否显示滚动条。
    status=yes|no	是否添加状态栏。
    resizable=yes|no	窗口是否可调节尺寸。
    location=yes|no	是否显示地址字段。
    
例
<!DOCTYPE html>
<html>
<head>
<script>
  function foo(){
    window.open("网页布局.html", "", "height=300,width=400,top=200,left=300,toolbar=no,menubar=no,scrollbars=no,resizable=no,location=no,status=no");
  } 
</script>
</head>
<body>
<input type="button" onClick="foo()" value="时间">
</body>
</html>

2) alert() 显示带有一段消息和一个确认按钮的警告框。
3) confirm()	显示带有一段消息以及确认按钮和取消按钮的对话框。
例：
  function foo() {
    var r = confirm("Press a button")
    if (r==true)
      document.write("You pressed OK!")
    else
      document.write("You pressed Cancel!")
  }
4) prompt()	显示可提示用户进行输入的对话框。
格式为：prompt(text,defaultText) 
text 为要在对话框中显示的纯文本。defaultText 为默认的输入文本。
例：
  function foo() {
    var name=prompt("Please enter your name","")
    if (name!=null && name!="")
      document.write("Hello " + name + "!")
  }
5) close()	关闭浏览器窗口。
只有通过 JavaScript 代码打开的窗口才能够由 JavaScript 代码关闭。
6) setInterval()	按照指定的周期（以毫秒计）来调用函数或计算表达式。
格式为：setInterval(code,millisec)
code 为要调用的函数或要执行的代码串。
millisec 为周期性执行或调用 code 之间的时间间隔，以毫秒计
7) clearInterval()	取消由 setInterval() 设置的 timeout。
格式为：clearInterval(id_of_setinterval)
id_of_setinterval	由 setInterval() 返回的 ID 值。

例：
<html>
<head>
<script>
var id=self.setInterval("clock()",1000)
function clock(){
  var t=new Date()
  document.getElementById("clock").value = t;
}
</script>
</head>
<body>
<input type="text" id="clock" size="50" />
</form>
<button onclick="window.clearInterval(id)">
Stop interval</button>
</body>
</html>

8) setTimeout()	在指定的毫秒数后调用函数或计算表达式。
格式为：setTimeout(code,millisec)
code 为要调用的函数后要执行的 JavaScript 代码串。
millisec 为在执行代码前需等待的毫秒数。

9) clearTimeout()	取消由 setTimeout() 方法设置的 timeout。
格式为：clearTimeout(id_of_settimeout)
id_of_settimeout	由 setTimeout() 返回的 ID 值。

例：
<html>
<head>
<script>
var c=0
var t
function timedCount(){
  document.getElementById('txt').value=c
  c=c+1
  t=setTimeout("timedCount()",1000)
}
function stopCount(){
  clearTimeout(t)
}
</script>
</head>
<body>
<form>
<input type="button" value="开始计时！" onClick="timedCount()">
<input type="text" id="txt">
<input type="button" value="停止计时！" onClick="stopCount()">
</form>
<p>
请点击上面的“开始计时”按钮。输入框会从 0 开始一直进行计时。点击“停止计时”可停止计时。
</p>
</body>
</html>

3、windows对象的事件
onload事件，当打开网页时就会激发onload事件。
onunload事件
例：
<html>
<head>
<script>
function foo(){
  alert("欢迎访问网站！");
}
function bar(){
  alert("欢迎下次再来！");
}
//window.onload = foo;
</script>
</head>
<body onload="foo()" onunload="bar()">
<a href="http://www.163.com">aaaaa</a>
</body>
</html>

4、windows对象的子对象
screen对象，包含客户端显示屏的信息。
document对象，代表整个 HTML 文档，用来访问页面中的所有元素。
history对象，包含了浏览器窗口访问过的 URL。
Navigator对象，包含客户端浏览器的信息。
location对象，包含了当前URL的信息。


十一、document对象
    document对象，代表整个 HTML 文档，用来访问页面中的所有元素。
1、document 对象的属性
    lastModified	返回文档被最后修改的日期和时间。
    referrer	返回载入当前文档的文档的 URL。如果当前文档不是通过链接访问的，则为 null。
    title	返回当前文档的标题。
    URL	返回当前文档的 URL。

例，在标题栏和状态栏显示滚动信息
<html>
<head>
<title>javascript示例</title>
<style type="text/css">
</style>
<script>
var i = 0;
var a = ["Javascript", "HTML", "CSS", "jQuery"];
function show(){
  if(i==a.length) i = 0;
  document.title = a[i];
  document.status = a[i];
  i++;
}
window.setInterval("show()", 2000);
</script>  
</head>
<body>
</body>
</html>

2、document 对象的方法
getElementById()	返回对拥有指定 id 的第一个对象的引用。
getElementsByName()	返回带有指定名称的对象集合。
getElementsByTagName()	返回带有指定标签名的对象集合。
write()	向文档写 HTML 表达式 或 JavaScript 代码。
writeln()	等同于 write() 方法，不同的是在每个表达式之后写一个换行符。	

例，Hello World!
<html>
<body>
<script>
  document.write("Hello World!");
</script>
</body>
</html>

3、document 对象的子对象
    all[]――提供对文档中所有 HTML 元素的访问。
    anchors[]――返回对文档中所有 Anchor 对象的引用。
    forms[]――返回对文档中所有 Form 对象引用。
    images[]――返回对文档中所有 Image 对象引用。
    links[]――返回对文档中所有 Area 和 Link 对象引用。

十二、屏幕、历史、地址和浏览器对象
1、屏幕对象screen
    screen对象，包含客户端显示屏的信息。

2、历史对象history
    history对象，包含了浏览器窗口访问过的 URL。

3、地址对象location
    location对象，包含了当前URL的信息。

4、浏览器对象Navigator
    Navigator对象，包含客户端浏览器的信息。

十三、JavaScript 事件
onabort	图像加载被中断
onblur	元素失去焦点
onchange	用户改变域的内容
onclick	鼠标点击某个对象
ondblclick	鼠标双击某个对象
onerror	当加载文档或图像时发生某个错误
onfocus	元素获得焦点
onkeydown	某个键盘的键被按下
onkeypress	某个键盘的键被按下或按住
onkeyup	某个键盘的键被松开
onload	某个页面或图像被完成加载
onmousedown	某个鼠标按键被按下
onmousemove	鼠标被移动
onmouseout	鼠标从某元素移开
onmouseover	鼠标被移到某元素之上
onmouseup	某个鼠标按键被松开
onreset	重置按钮被点击
onresize	窗口或框架被调整尺寸
onselect	文本被选定
onsubmit	提交按钮被点击
onunload	用户退出页面




十四、Javascript和CSS
1、大部分HTML元素都有一个style属性，利用style来取得或改变CSS样式
(1) 用style的CSS属性
对于使用-号的CSS属性，要将其转换为驼峰大小写形式，如background-color改为backgroundColor
例
  var x = document.getElementById("myDiv");
  x.style.backgroundColor = "#cfc";  // 背景颜色
  x.style.color = "#099";  // 文字颜色
  x.style.fontSize = "36pt";  // 文字大小
  x.style.cssText = "width: 500px; color: #0c0; background-color: #ff9";
  
(2) 用style的cssText属性
例：
x.style.cssText = "width: 500px; color: #0c0; background-color: #ff9";

(3) 用style的setProperty()方法
例：
  x.style.setProperty("background-color", "#33cc33"); // 背景颜色
  x.style.setProperty("font-size", "40pt"); // 文字大小
  
(4) style的removeProperty()方法移除一个CSS属性
例：x.style.removeProperty("background-color");

(5) style的getProperty()方法取得一个CSS属性的值
例：alert(x.style.getPropertyValue("background-color"));

2、增加和去除class属性
  var x = document.getElementById("myDiv");
  x.setAttribute("class", "myClass");  // 增加class属性
  x.removeAttribute("class");  // 去除class属性
  
3、计算样式getComputedStyle，取得元素的所有样式
例：
  var x = document.getElementById("myDiv");
  var y = document.defaultView.getComputedStyle(x);
  alert(y.backgroundColor);   
  alert(y.fontSize); 
  
例
<html>
<head>
<title>javascript示例</title>
<style>
#myDiv {
  width: 450px;
  color: red;
  background: #cff;
  font-size: 36pt;
  border: 1px solid blue;
}
</style>
</head>
<body>
<div id="myDiv">Hello，World！</div>
<br>
<input type="button" value="改变样式" onclick="changeStyles()" />    
<script>
var x = document.getElementById("myDiv");
function changeStyles(){
  x.style.backgroundColor = "#ffc";  // 背景颜色
  x.style.color = "green";  // 文字颜色
  x.style.fontSize = "48pt";  // 文字大小
//  x.style.cssText = "width: 500px; color: #0c0; background-color: #ff9";
//  x.style.setProperty("background-color", "#ffc"); // 背景颜色
//  x.style.setProperty("color", "green"); // 文字颜色
//  x.style.setProperty("font-size", "48pt"); // 文字大小
}
</script>  
</body>
</html>


十五、DOM（文档对象模型）
1、操作节点
(1) appendChild(newNode) 向 childNodes 列表的末尾增加一个节点
    例：someNode.appendChild(newNode)
(2) insertBefore(newNode, Node) 将一个节点插入到一个节点的前面
    例：someNode.insertBefore(newNode, someNode.firstChild)
(3) replaceChild(newNode, Node) 用一个节点替换一个节点
(4) removeChild(Node) 移除一个节点

2、
(1) 创建元素 document.createElement("div")
(2) 创建文本节点 document.createTextNode("Hello world")

3、操作属性
(1) getAttribute() 取得属性的值
(2) setAttribute() 设置属性，例
    var div = document.getElementById("myDiv");
    div.setElementById("class", "abc");
(3) removeAttribute() 移除属性

3、表格 table
<table>元素的属性和方法
caption：得到caption
tHead：得到thead
tBodies：得到tbody的集合
tFoot：得到tfoot
rows：表格中所有行的集合
createTHead()：创建<thead>元素
createTFoot()：创建<tfoot>元素
createCaption()：创建<caption>元素
insertRow(n)：插入一行，返回其引用
deleteRow(n)：删除第n行

<tr>元素的属性和方法
cells：<tr>中的单元格的集合
insertCell(n)：插入但单元格
deleteCell(n)：删除单元格

4、插入标记
(1) innerHTML：代表元素的所有子节点
(2) outerHTML：代表元素及其所有子节点
(3) insertAdjacentHTML()：插入HTML标签和文本